// This first test uses ParticleSimple, SiCoDe, ModelSimpleQuad and ControllerSimple
// in order to test the Particle Swarm Algorithm

algorithm = Genetic; // Genetic or ParticleSwarm

config {
  debug = true;
	
  // Exporting:
  export_solution = true;
  solution_filename = sol_3_n.m;
  export_evolution = false;
//   evolution_filename = evo_swarm_3_n.m;
//   export_all_evolution = true;
  best_individual = best_ga_3_n.m;
  export_trajectories = true; // The solution trajectories are exported to a file named as the trajectory_filename field
  trajectory_filename = traj_ga_3_n.m;
  solution_filename = sol_ga_3_n.m; // The output flight plan can be also exported
  export_solution = true;
  export_catec = catec_3_ga_n_2; // Also, the trajectories can be exported to a file which can be understood by the CATEC testbed
  
//   initial_solution = 0.664029 0.671979 0.554378 0.671979 0.600447 0.671978;

  
  // Configuration of the algorithm
  population = 2;
  generations = 1;
  modify_trajectory = false; // If true --> the trajectories are modified and no waypoints are added
  intermediate_waypoints = 2; // Modifying the trajectory --> no new waypoints are necessary
  waypoint_dimension = 3; // Will not modify the position of the intermediate waypoints
  time_exploration = true; // Will modify the ETA To the intermediate and final waypoints
  time_exploration_type = 1; // 1 = Maintain ETA ; 0 = Independent search
  custom_evolution = false; 
  initializer_type = Random;  
  cost_type = no_sim; // Type of COST (no_sim, eta, delta_speed, reduced, adaptative, min_dist)
  
  manoeuvre_selection = true; // If true --> MS-PSO is selected. Necessary fields: min_z, max_z, max_course
  min_z = 1.0;
  max_z = 5.0;
  max_course = 0.7;
  
  min_control_dist = 0.01;
  
  bounds {
	  upper = 10.0 10.0 10.0 10.0 10.0 10.0 10.0 10.0;
	  lower = 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0;
	  speed = 2.0 2.0 2.0 2.0 2.0 2.0 2.0 2.0;
  }
  
  cost {
	  distance = 1.0;
	  collision_penalty = 100.0;
	  speed_factor = 1.0;
  }
  geometry_expansion = 0.2; // First expands the geometry when resolving and returns to the original value when checking
}

simulator {
  
  // Sample time
  T = 0.1;

  // Configuration parameters

  config {
// 		debug = true;
  }

  // Collision detector data
  collision_detector_type = SiCoDe;

  // UAV 1
  uav {
	  id = First_UAV; // A string that identifies the uav
	  particle_type = ParticleSimple; // The only particle implemented so far.
  
	  model {
		  model_type = ModelQuadCatec; 
		  parameters = 1.0 0.5 1.0 0.1 1.9; // alpha (gamma, v), max_h_dot, v_min, v_max)
		  initial_conditions = 0 5 2 0 0; // x y h phi(yaw) v
		  T = 0.2;
	  }

	  controller {
		  controller_type = ControllerQuadCatec; // The only controller implemented so far
		  speed = 1;
		  flight_plan {
			  waypoint = 0 5 2;
			  waypoint = 10 5 2;
			  cruise_speed = 1;
		  }
	  }
	  weight = 1.0; // Useless so far.
	  geometry = 1.2 1.2 0.5;
  } // End of UAV1
  
  // UAV 2
  uav {
	  id = Second_UAV; // A string that identifies the uav
	  particle_type = ParticleSimple; // The only particle implemented so far.
  
	  model {
		  model_type = ModelQuadCatec; // The only model implemented so far
		  parameters = 1.0 0.5 1.0 0.1 1.9; // alpha (gamma, v), max_h_dot, v_min, v_max)
		  initial_conditions = 5 0 2 1.57 0; // x y h phi(yaw) v
		  T = 0.2;

	  }

	  controller {
		  controller_type = ControllerQuadCatec; // The only controller implemented so far
		  speed = 1;
		  flight_plan {
			  waypoint = 5 0 2;
			  waypoint = 5 10 2;
			  cruise_speed = 1;
		  }
	  }
	  weight = 1.0; // Useless so far.
	  geometry = 1.2 1.2 0.4;
  } // End of UAV2
  
  // UAV 3
  uav {
	  id = Third_UAV; // A string that identifies the uav
	  particle_type = ParticleSimple; // The only particle implemented so far.
  
	  model {
		  model_type = ModelQuadCatec; // The only model implemented so far
		  parameters = 1.0 0.5 1.0 0.1 1.9; // alpha (gamma, v), max_h_dot, v_min, v_max)
		  initial_conditions = 5 10 2 -1.57 0; // x y h phi(yaw) v
		  T = 0.2;
	  }

	  controller {
		  controller_type = ControllerQuadCatec; // The only controller implemented so far
		  speed = 1;
		  flight_plan {
			  waypoint = 5 10 2;
			  waypoint = 5 0 2;
			  cruise_speed = 1;
		  }
	  }
	  weight = 1.0; // Useless so far.
	  geometry = 1.2 1.2 0.4;
  } // End of UAV3
  
}// End of simulator block

