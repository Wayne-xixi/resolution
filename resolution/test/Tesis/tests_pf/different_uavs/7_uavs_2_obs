algorithm = Genetic; // Genetic or ParticleSwarm

config {
	// Exporting:
	export_solution = true;
	solution_filename = sol_gen.m;
	//export_evolution = true;
	//evolution_filename = evo_gen_2.m;
	
	debug = false;
	population = 100;
	generations = 5;
	intermediate_waypoints = 1;
	waypoint_dimension = 2;
	custom_evolution = true;
	initializer_type = Random;
	mutation_probability = 0.1;
	mutation_deviation = 2.5;
	crossover_probability = 0.9;
	crossover_type = OnePoint;

	cost {
		distance = 1.0;
		collision_penalty = 100000.0;
	}
	
	bounds {
	  upper = 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000;
	  lower = 0 0 0 0 0 0 0 0 0 0 0 0 0 0;
	}
}

simulator {
  // Sample time
	T = 1.0;
	debug = true;
	
	obstacles {
	  obstacle = 5500 5000 200;
	  obstacle = 5000 1500 200;
	}
	
	// Collision detector data
	collision_detector_type = SiCoDe;
        uav {
	  id = First_UAV; // A string that identifies the uav (controlled)
	  particle_type = ParticleSimple; // The only particle implemented so far.
	  debug = true;
	  
	  model {
		  model_type = ModelSimpleUAVPolarWind; 
		  parameters = 1.5 0.33 0.05 0.3364 1.4680 25.7 62.76 5.0 2.0 0.0 0.5; // alpha_v alpha_theta alpha_h alpha_h_dot v_min v_max
		  initial_conditions = 0 0 600 50.0 0 0 0; // x y h v theta h_dot 
		  T = 1.0;
	  }

	  controller {
		  controller_type = ControllerSimpleUAV; 
		  min_wp_dist = 100.0;
		  speed = 53.5;
		  flight_plan {
			  waypoint = 0.0 0.0 600.0;
			  waypoint = 10000 10000 600;
			  cruise = 53.5;
		  }
	  }
	  weight = 1.0; // Useless so far.
	  geometry = 500 500 100;
  }

  // UAV
  uav {
	  id = SecondUAV; // A string that identifies the uav
	  particle_type = ParticleSimple; // The only particle implemented so far.
	  
	  
	  model {
		  model_type = ModelSimpleUAVPolarWind; 
		  parameters = 1.5 0.33 0.05 0.3364 1.4680 25.7 62.76 5.0 2.0 0.0 0.5; // alpha_v alpha_theta alpha_h alpha_h_dot v_min v_max
		  initial_conditions = -500 2000 600 50 1.0 0; // x y h v theta h_dot 
		  T = 1.0;
		  
	  }

	  controller {
		  controller_type = ControllerSimpleUAV; 
		  min_wp_dist = 100.0;
		  speed = 53.5;
		  flight_plan {
			  waypoint = -500 2000 600;
			  waypoint = 4500 4000 600;
			  waypoint = 7000 10000 600;
			  cruise = 53.5;
		  }
	  }
	  weight = 1.0; // Useless so far.
	  geometry = 500 500 100;
  }
  
   // UAV
  uav {
	  id = ThirdUAV; // A string that identifies the uav
	  particle_type = ParticleSimple; // The only particle implemented so far.
	  debug = true;
	  
	  model {
		  model_type = ModelSimpleUAVPolarWind; 
		  parameters = 1.5 0.33 0.05 0.3364 1.4680 25.7 62.76 5.0 2.0 0.0 0.5; // alpha_v alpha_theta alpha_h alpha_h_dot v_min v_max
		  initial_conditions = 500 5000 600 50 0 0; // x y h v theta h_dot 
		  T = 1.0;
		  
	  }

	  controller {
		  controller_type = ControllerSimpleUAV; 
		  min_wp_dist = 100.0;
		  speed = 53.5;
		  flight_plan {
			  waypoint = 500 5000 600;
			  waypoint = 5000 6000 600;
			  waypoint = 10000 3000 600;
			  cruise = 53.5;
		  }
	  }
	  weight = 1.0; // Useless so far.
	  geometry = 500 500 100;
  }
  
   // UAV
  uav {
	  id = FourthUAV; // A string that identifies the uav
	  particle_type = ParticleSimple; // The only particle implemented so far.
	  debug = true;
	  
	  model {
		  model_type = ModelSimpleUAVPolarWind; 
		  parameters = 1.5 0.33 0.05 0.3364 1.4680 25.7 62.76 5.0 2.0 3.8 0.5; // alpha_v alpha_theta alpha_h alpha_h_dot v_min v_max
		  initial_conditions = 8000 10000 600 50 0.78 0; // x y h v theta h_dot 
		  T = 1.0;
		  
	  }

	  controller {
		  controller_type = ControllerSimpleUAV; 
		  min_wp_dist = 100.0;
		  speed = 53.5;
		  flight_plan {
			  waypoint = 8000 10000 600;
			  waypoint = 7000 7000 600;
			  waypoint = 10000 6000 600;
			  cruise = 53.5;
		  }
	  }
	  weight = 1.0; // Useless so far.
	  geometry = 500 500 100;
  }
  
  // UAV
  uav {
	  id = FifthUAV; // A string that identifies the uav
	  particle_type = ParticleSimple; // The only particle implemented so far.
	  debug = true;
	  
	  model {
		  model_type = ModelSimpleUAVPolarWind; 
		  parameters = 1.5 0.33 0.05 0.3364 1.4680 25.7 62.76 5.0 2.0 3.8 0.5; // alpha_v alpha_theta alpha_h alpha_h_dot v_min v_max
		  initial_conditions = 8000 3000 600 50 0.78 0; // x y h v theta h_dot 
		  T = 1.0;
		  
	  }

	  controller {
		  controller_type = ControllerSimpleUAV; 
		  min_wp_dist = 100.0;
		  speed = 53.5;
		  flight_plan {
			  waypoint = 8000 3000 600;
			  waypoint = 4000 1700 600;
			  waypoint = 500 2500 600;
			  cruise = 53.5;
		  }
	  }
	  weight = 1.0; // Useless so far.
	  geometry = 500 500 100;
  }
  
  // UAV
  uav {
	  id = SixthUAV; // A string that identifies the uav
	  particle_type = ParticleSimple; // The only particle implemented so far.
	  debug = true;
	  
	  model {
		  model_type = ModelSimpleUAVPolarWind; 
		  parameters = 1.5 0.33 0.05 0.3364 1.4680 25.7 62.76 5.0 2.0 3.8 0.5; // alpha_v alpha_theta alpha_h alpha_h_dot v_min v_max
		  initial_conditions = 4000 1000 600 50 0.78 0; // x y h v theta h_dot 
		  T = 1.0;
		  
	  }

	  controller {
		  controller_type = ControllerSimpleUAV; 
		  min_wp_dist = 100.0;
		  speed = 53.5;
		  flight_plan {
		          waypoint = 4000 1000 600;
			  waypoint = 4500 2000 600;
			  waypoint = 2000 8000 600;
			  cruise = 53.5;
		  }
	  }
	  weight = 1.0; // Useless so far.
	  geometry = 500 500 100;
  }
  
  // UAV
  uav {
	  id = SeventhUAV; // A string that identifies the uav
	  particle_type = ParticleSimple; // The only particle implemented so far.
	  debug = true;
	  
	  model {
		  model_type = ModelSimpleUAVPolarWind; 
		  parameters = 1.5 0.33 0.05 0.3364 1.4680 25.7 62.76 5.0 2.0 3.8 0.5; // alpha_v alpha_theta alpha_h alpha_h_dot v_min v_max
		  initial_conditions = 0 9200 600 50 0.78 0; // x y h v theta h_dot 
		  T = 1.0;
		  
	  }

	  controller {
		  controller_type = ControllerSimpleUAV; 
		  min_wp_dist = 100.0;
		  speed = 53.5;
		  flight_plan {
			  waypoint = 0 9200 600;
			  waypoint = 5000 8000 600;
			  waypoint = 8000 5000 600;
			  cruise = 53.5;
		  }
	  }
	  weight = 1.0; // Useless so far.
	  geometry = 500 500 100;
  }
 
}