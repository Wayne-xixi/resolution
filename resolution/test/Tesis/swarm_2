// This first test uses ParticleSimple, SiCoDe, ModelSimpleQuad and ControllerSimple
// in order to test the Particle Swarm Algorithm

algorithm = ParticleSwarm; // Genetic or ParticleSwarm

config {
  debug = true;
	
  // Exporting:
  export_solution = true;
  solution_filename = sol.m;
  export_evolution = true;
  evolution_filename = evo_swarm_2.m;
  export_all_evolution = true;
  
  //debug = false;
  best_individual = best.m;
  population = 100;
  generations = 100;
  modify_trajectory = true; // If true --> the trajectories are modified and no waypoints are added
  intermediate_waypoints = 0; // Modifying the trajectory --> no new waypoints are necessary
  waypoint_dimension = 0; // Will not modify the position of the intermediate waypoints
  time_exploration = true; // Will modify the ETA To the intermediate and final waypoints
  time_exploration_type = 1; // 1 = Maintain ETA ; 0 = Independent search
  custom_evolution = false; 
  initializer_type = Random;  
  
  min_control_dist = 0.01;
  
  export_trajectories = true; // The solution trajectories are exported to a file named as the trajectory_filename field
  trajectory_filename = traj.m;
  
  solution_filename = sol.m; // The output flight plan can be also exported
  export_solution = true;
  export_catec = catec; // Also, the trajectories can be exported to a file which can be understood by the CATEC testbed
  
  bounds {
	  upper = 10.0 10.0 10.0 10.0;
	  lower = 0.0 0.0 0.0 0.0;
	  speed = 2.0 2.0 2.0 2.0;
  }
  cost_type = delta_speed;
  cost {
	  distance = 1.0;
	  collision_penalty = 100.0;
	  speed_factor = 1.0;
  }
  geometry_expansion = 0.2; // First expands the geometry when resolving and returns to the original value when checking
}

simulator {
  
  // Sample time
  T = 0.1;

  // Configuration parameters

  config {
// 		debug = true;
  }

  // Collision detector data
  collision_detector_type = SiCoDe;

  // UAV 1
  uav {
	  id = First_UAV; // A string that identifies the uav
	  particle_type = ParticleSimple; // The only particle implemented so far.
  
	  model {
		  model_type = ModelQuadCatec; 
		  parameters = 1.0 0.5 1.0 0.1 1.9; // alpha (gamma, v), max_h_dot, v_min, v_max)
		  initial_conditions = 0 5 2 0 0; // x y h phi(yaw) v
		  T = 0.2;
	  }

	  controller {
		  controller_type = ControllerQuadCatec; // The only controller implemented so far
		  speed = 1;
		  flight_plan {
			  waypoint = 0 5 2;
			  waypoint = 5 5 2; 
			  waypoint = 10 5 2;
// 			  laas_file = traj_1_wp_complete;
			  cruise_speed = 1;
		  }
	  }
	  weight = 1.0; // Useless so far.
	  geometry = 1.2 1.2 0.5;
  } // End of UAV1
  
  // UAV 2
  uav {
	  id = Second_UAV; // A string that identifies the uav
	  particle_type = ParticleSimple; // The only particle implemented so far.
  
	  model {
		  model_type = ModelQuadCatec; // The only model implemented so far
		  parameters = 1.0 0.5 1.0 0.1 1.9; // alpha (gamma, v), max_h_dot, v_min, v_max)
		  initial_conditions = 5 0 2 0 1.57; // x y h phi(yaw) v
		  T = 0.2;

	  }

	  controller {
		  controller_type = ControllerQuadCatec; // The only controller implemented so far
		  speed = 1;
		  flight_plan {
			  waypoint = 5 0 2;
			  waypoint = 5 5 2; 
			  waypoint = 5 10 2;
// 			  laas_file = traj_2_wp_complete_mod_diff_altitude;
			  cruise_speed = 1;
		  }
	  }
	  weight = 1.0; // Useless so far.
	  geometry = 1.5 1.5 0.4;
  } // End of UAV2
  
}// End of simulator block

